- In javascript functions are the only things that create a new scope. You are allowed to use free-standing blocks.

- The 'delete' operator can delete a object property. It is a unary operator that, when applied to a property access expression, will re-move the named property from the object. This is not a common thing to do, but it is possible.
Ex: > var obj1 = {"FirstName":"RaviTeja", "LastName":"Pothana"}
    > delete obj1.LastName
    > console.log(obj1.LastName)
      undefined 

- The binary 'in' operator, when applied to a string and an object, returns a Boolean value that indicates whether that object has that property.
Ex: > console.log("FirtName" in obj1)
      true

- Push and Pop, which add and remove elements at the end of an array, earlier in this chapter. The corresponding methods for adding and removing things at the start of an array are called unshift and shift.

- The indexOf method has a sibling called lastIndexof, which starts searching for the given element at the end of the array instead of the front. Both indexOf and lastIndexOf take an optional second argument
that indicates where to start searching from.

- Another fundamental method is slice , which takes a start index and an end index and returns an array that has only the elements between those indices. The start index is inclusive, the end index exclusive.When the end index is not given, slice will take all of the elements after the start index. Strings also have a slice method, which has a similar effect.

- The concat method can be used to glue arrays together, similar to what the + operator does for strings. The following example shows both concat and slice in action. It takes an array and an index, and it returns a new array that is a copy of the original array with the element at the given index removed.
Ex: > function remove(array, index) {
        return array.slice(0, index)
          .concat(array.slice(index + 1));
      }
    > console.log(remove(["a", "b", "c", "d", "e"], 2));
      ["a", "b", "d", "e"]


