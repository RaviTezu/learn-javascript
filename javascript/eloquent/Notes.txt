- In javascript functions are the only things that create a new scope. You are allowed to use free-standing blocks.

- The 'delete' operator can delete a object property. It is a unary operator that, when applied to a property access expression, will re-move the named property from the object. This is not a common thing to do, but it is possible.
Ex: > var obj1 = {"FirstName":"RaviTeja", "LastName":"Pothana"}
    > delete obj1.LastName
    > console.log(obj1.LastName)
      undefined 

- The binary 'in' operator, when applied to a string and an object, returns a Boolean value that indicates whether that object has that property.
Ex: > console.log("FirtName" in obj1)
      true

- Push and Pop, which add and remove elements at the end of an array, earlier in this chapter. The corresponding methods for adding and removing things at the start of an array are called unshift and shift.

- The indexOf method has a sibling called lastIndexof, which starts searching for the given element at the end of the array instead of the front. Both indexOf and lastIndexOf take an optional second argument
that indicates where to start searching from.

- Another fundamental method is slice , which takes a start index and an end index and returns an array that has only the elements between those indices. The start index is inclusive, the end index exclusive.When the end index is not given, slice will take all of the elements after the start index. Strings also have a slice method, which has a similar effect.

- The concat method can be used to glue arrays together, similar to what the + operator does for strings. The following example shows both concat and slice in action. It takes an array and an index, and it returns a new array that is a copy of the original array with the element at the given index removed.
Ex: > function remove(array, index) {
        return array.slice(0, index)
          .concat(array.slice(index + 1));
      }
    > console.log(remove(["a", "b", "c", "d", "e"], 2));
      ["a", "b", "d", "e"]

- We can read properties like length and toUpperCase from string values. But if you try to add a new property, it doesn’t stick.
> var myString = "Fido";
  myString.myProperty = "value";

> console.log(myString.myProperty);
  undefined

Values of type string, number, and Boolean are not objects, and though the language doesn’t complain if you try to set new properties on them, it doesn't store those properties. The values are immutable and cannot be changed. But these types do have some built-in properties. Every string value has a number of methods. The most useful ones are probably slice and indexOf, which resemble the array methods of the same name.

- One difference is that a string’s indexOf can take a string containing more than one character, whereas the corresponding array method looks only for a single element.
Ex: > console.log("one two three".indexOf("ee"));
      11 

- The trim method removes whitespace (spaces, newlines, tabs, and similar characters) from the start and end of a string.
Ex: > console.log("okay \n ".trim());
      okay

- We have already seen the string type’s length property. Accessing the individual characters in a string can be done with the charAt method but also by simply reading numeric properties, like you’d do for an array. 

- Whenever a function is called, a special variable named arguments is added to the environment in which the function body runs. This variable refers to an object that holds all of the arguments passed to the function.

- The arguments object has a length property that tells us the number of arguments that were really passed to the function. It also has a property for each argument, named 0, 1, 2, and so on.
If that sounds a lot like an array to you, you’re right, it is a lot like an array. But this object, unfortunately, does not have any array methods (like slice or indexOf ), so it is a little harder to use than a real array.

- In browsers, the global scope object is stored in the window variable. 
> var myVar = 10;
> console.log("myVar" in window);
true
> console.log(window.myVar);
10
