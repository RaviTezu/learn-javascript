Object-Orienting:
-----------------

Singleton:

-> var Router = function(){
   //Singleton!
   if (Router.__instance__){
       return Router.__instance__;
   }
   Router.__instance__ = this;
   this.routes = {};
};

Router.protoype.setRoute = function(match, fn) {
   this.routes[match] = fn;
};

var myrouter = new Router();
var another = new Router();

myrouter == another;

---

*) A constructor makes an object linked to its own prototype.

*) function Foo(who){
     this.me = who;
}

Foo.prototype.identity = function(){
   return "I am "+this.me;
};

var a1 = new Foo("a1");
var a2 = new Foo("a2");

a2.speak = function(){
  alert("Hello, " + this.identify() +".");
};

a1.constructor == Foo; //a1.constructor doesn't exit, so prototype is referenced and this is True. 
a1.constructor == a2.constructor; //True which is Foo. 
a1.__proto__   == Foo.prototype;  // __proto__ is like a referencing to its parent. 
a1.__proto__   == a2.__proto__;

-----------------------------------------------------------------------------------------

Foo(fn) -----.prototype--------> (un-named object)[toString .. ... ] 
Foo(fn) <----.constructor------ (un-named object)

a1(object) -----.__proto__----> (above un-named object)

-----------------------------------------------------------------------------------------
*)Inheriting:

function Foo(who){
     this.me = who;
}

Foo.prototype.identity = function(){
   return "I am "+this.me;
};

function Bar(who){
  Foo.call(this,who);
}

//Bar.prototype = new Foo(); //Or.. 
Bar.prototype = Object.create(Foo.prototype); // Inheritance - standard format. 
i//Note: .constructor is broken here..  This returns Foo. Which is bad! 

Bar.prototype.speak = function(){
  alert("Hello, " + this.identify());

var b1 = new Bar("b1);
var b2 = new Bar("b2);

b1.speak(); // alerts: Hello, I am b1
b2.speak(); // alerts: Hello, I am b2 
};

[[ prototype ]] is a linkage between the objects and like between the child and parent object, this linkage can be created by using the object.create. If you call a property on a object which it can't hand;e then it will delegate the [[ prototype ]] chain to get the object which has it. To find out where an object's [[ prototype ]] points to ?? __proto__ or object.getprototype 

*) 
