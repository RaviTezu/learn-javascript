Object-Orienting:
-----------------

Singleton:

-> var Router = function(){
   //Singleton!
   if (Router.__instance__){
       return Router.__instance__;
   }
   Router.__instance__ = this;
   this.routes = {};
};

Router.protoype.setRoute = function(match, fn) {
   this.routes[match] = fn;
};

var myrouter = new Router();
var another = new Router();

myrouter == another;

---

*) A constructor makes an object linked to its own prototype.

*) function Foo(who){
     this.me = who;
}

Foo.prototype.identity = function(){
   return "I am "+this.me;
};

var a1 = new Foo("a1");
var a2 = new Foo("a2");

a2.speak = function(){
  alert("Hello, " + this.identify() +".");
};

a1.constructor == Foo;
a1.constructor == a2.constructor;
a1.__proto__   == Foo.prototype;
a1.__proto__   == a2.__proto__;
