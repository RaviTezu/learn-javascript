Closures:
---------
Closure absolutely depends on the lexical scope :). JS treats functions as first-class citizens.
Closure is when a function "remembers" its lexical scopr even when the function is executed outside that lexical scope. 
Ex-1:
function foo(){
  var bar = "bar";
  function baz() {
    console.log(bar);
  }
  bam(baz);
}

function bam(baz) {
  baz();  //"bar" - was able to get it from line 2(just after the function declaration)
}

foo():

Ex-2:
function foo() {
  var bar = "bar";
  return function() {
    console.log(bar);
  };
}

function bam() {
  foo() (); //"bar"
}

bam();

Ex-3:
function foo() {
  var bar = "bar";

  setTimeout(function() {
      console.log(bar);
      },1000);
}

//If you have changed the value of variable bar, with in those 1000 ms, then the new value will be printed. 

 
Ex-4:
function foo() {
  var bar = "bar";
  $("#btn").click(function(evt) {
       console.log(bar);
    });
}

foo();

Ex-5:
function foo() {
  var bar = 0;
  setTImeout(function(){
    console.log(bar++);    
  },100);
  setTImeout(function(){
    console.log(bar++);    
  },200);

}

foo(); //0 1 

Ex-6:

function foo(){
  var bar = 0;
  setTimeout(function(){
    var baz = 1;
    console.log(bar++);
    setTImeout(function(){
      console.log(bar+baz);
    },200);
  },100);
}

foo();// 0 2 

Ex-7:
for(var i=1; i<=5; i++){
  setTimeout(function(){
    console.log("i: "+i);
   },i*1000);
}

// Variable i is already incremented to 6 before the function can print its value. Also, this is same as having 5 setTimeout calls in the for loop and it is like 5 different functions, that are closing over the exact same scope which is global :)

//To get what exactly you wanted to print:

for(var i=1; i<=5;i++){
  (function(i){
     setTimeout(function(){
        console.log("i: "+i);
     },i*1000);
   })(i);
}

// Each loop in the above example, will gets its own i. So, it will print i:1 .. i:5

for(let i=1; i<=5; i++){
  setTimeout(function(){
    console.log("i: "+i);
   },i*1000);
}

// will print 1..5


var foo = (function(){
  var o = { bar:"bar" };
  return { obj:o };
)();

console.log(foo.obj.bar); //"bar"
// The above example is not a closure, because it is explicitly return the object. Because there's no function remember the scope, it is object reference. 

Module Patterns:
----------------
closure - classic module pattern: 
1. There have to be outer function which has to be executed.
2. There must be one or more inner functions should be returned, that are closured over private functions.
var foo = (function(){
  var o = { bar: "bar"};
  return { 
    bar: function(){
           console.log(o.bar);
         }
    };
})();

foo.bar(); //"bar"

//other version of same, classic module pattern:

var foo = (function(){
  var publicAPI = { 
    bar: function(){
         publicAPI.baz();
    },

    baz: function(){
         console.log("baz");
    }
  };
  return PublicAPI;
})();

foo.bar(); //"baz"

//As for ES6 we are getting file based module.
//When a file gets loaded of this mechanism, it is considered as module. 
foo.js:
var o = {bar:"bar"};
export function bar(){
  return o.bar;
}

--
import bar from "foo";
bar(); //"bar"

module foo from "foo";
foo.bar(); //"bar"


