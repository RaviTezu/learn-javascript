*) Never use a anonymous function

*) Never use `eval` or `with` keywords in your code - In strict mode the `with` keyword is disabled. 

*) IIFE:
- Never use a anonymous function, name it.


- Never use `eval` or `with` keywords in your code - In strict mode the `with` keyword is disabled. 


- IIFE:(Immediately invoked fuction expression)
--------------------------------------------
- Wrapping the function with paranthesis will make it an fucnction expression. 
- The variables declared in this function will not be leaked out.
- It is good, if you could name your IFFE function, it wasn't named in the above example. 

var foo = "foo";

(function() {

  var foo = "foof2";
  console.log(foo);  //"foo2"
})();

console.log(foo); //"foo"

- Wrapping the function with paranthesis will make it an fucnction expression.
- The variables declared in this function will not be leaked out.

OR 

var foo = "foo";
 
(function(bar){
  var foo = bar;
  console.log(foo); /"foo"

})(foo);

console.log(foo); /"foo"

*) let keyword in ES6: (Block scope)
- Where as, var is function scope
function foo() {
var bar = "bar";
for(let i=0; i < bar.length; i++){
  console.log(bar.charAt(i));
}
console.log(i); //RefernceError
}

foo();

- with "var" instead of "let", will attach the variable i to the function scope rather than the for block scope. so "let" is kinda hijacking the scope of for loop.

- function foo(bar) {
if (bar) {
  let baz = bar;
  if (baz) {
    let bam = baz;
  }
  console.log(bam); //Error
}
console.log(bam); //Error
}

foo("bar");

}

If you have a "let z = 2;" declared in a If statement at the middle, this z is available only from the middle of the If statement. So put all the lets at the top of the blocks.

- Note: This is rejected in ES6
function foo(bar) {
  let (baz = bar) {
    console.log(baz); //"bar"
  }
  console.log(baz); //Error
}

foo("bar");

So, use this:
- function foo(bar){
  /* let */ { let baz = bar;
    console.log(baz); //"bar"
  } console.log(baz); //Error
}
foo("bar");

A tool for use let-er to take the first example and returns the above form. So, it is like it will take the non-standart code and returns a standard code - These let-er or coffee-script are like transpilers.


*) Use ES6 and use some transpilers to convert it to ES5.

*) JS have lexical scoping. You can cheat this lexical scoping by using eval and with keywords ;)

*) You can create a new scope in JS by functions, catch, curly with let keywords. 

*) undeclared vs undefined: undefined is a value, however undeclared is never been declared. undefined is like, it is currently not having a value, if it is undeclared, you will get a reference error. 

*) Hoisting:(conceptual model, not a standart)
a;         
b;
var a = b;
var b = 2;
b;
a;

-----> Will be re-formed like this, during the compile phase:
var a;
var b;
a;
b;
a = b;
b = 2;
b;
a;


------ 
var a = b();
var c = d();
a;
c;

function b() {
return c;
}

var d = function() {
return b();
};

----> moved:
function b() {
  return c;
}

var a;
var c;
var d;
a = b();
c = d();
a;
c;
d = function(){
   return b();
};

-------

foo();
var foo = 2;

function foo() {
  console.log("bar");
}

function foo() {
  console.log("foo");
}

----> 

function foo(){
console.log("bar");
}
function foo(){
console.log("foo");
}
var foo = 2;
foo();

- Hoisting? - It is like, pull ups the declarations: But why it hoisting? Mutual recursion wouldn't be possible if you don't having this hoisting, as you mutual recursion is like, having two or more functions and one function calling the other function and the other function is calling the before function - Let's say A calls B and B call A --> So, you would need one function to be declared late. So, it has to swap places...

Also, there's no hoisting for let :)
Ex:

a(1);

function a(foo){
 if(foo > 20) return foo;
 return b(foo+2);
}

function b(foo) {
 return c(foo) + 1; 
}

function c(foo) {
 return a(foo*2);
}

Ans:
a(1) == 39
 |
b(3) == 39
 | 
c(3) + 1 == 39
 | 
a(6) == 38
 |
b(8) == 38
 |
c(8) + 1 == 38
 |
a(16) == 37
 |
b(18) == 37
 |
c(18) + 1 == 37
 |
36 

Ex: Including the header file at the top of c program is manaul hoisting. 

*) function foo(bar){
if (bar) {
  console.log(baz); //ReferenceError
  let baz = bar;
}

*) this:
Every function, while executing has a reference to its current execution context called "this".
Execution context: where the function is called and when the function is called. 
Don't compare javascript's "this" with other languages "this".

4 Rules: (ask the call sight for these 4 rules.)
------------------------------------------------
2 rules - Implicit and default binding rules:

function foo(){
  console.log(this.bar);
}

var bar = "bar1";
var o2  = { bar: "bar2", foo:foo };
var o3  = { bar: "bar3", foo:foo };

foo();     //bar1 - and in strict mode it is undefined, as you know in not strict mode it is the global variable - default rule.
o2.foo();  //bar2 - o2 has a reference to the foo function in it. 
o3.foo();  //bar3


-----

function foo() {
  var bar = "bar1";
  baz();
}

function baz() {
  console.log(this.bar);
}

var bar = "bar2";
foo();   // bar2

----- 

fuction foo() {
  var bar = "bar1";
  this.baz = baz;
  this.baz();
}

function baz(){
  console.log(this.bar);
}

var bar = "bar2";
foo(); // bar2

Explicit binding:
----------------

function foo(){
  console.log(this.bar);
}

var bar = "bar1";
var obj = {bar:"bar2"};

foo();  ///bar1
foo.call(obj); //bar2 and also, you can use apply.

Ex2: (Hard binding)

function foo(){
  console.log(this.bar);
}

var obj = { bar: "bar" };
var obj2 = {bar: "bar2"};

var orig = foo;
foo = function(){ orig.call(obj); };

foo(); //bar
foo.call(obj2); //bar

*) New: Don't compare with other languages. 
- function foo() {
  this.baz = "baz";
  console.log(this.bar + " " + baz);
}

var bar = "bar";
var baz = new foo(); //??? 

-> new keyword infront of a function will turn it into a constructor call. 
4 things: 1. A brand new empty object is created. 
          2. The object created in the step1 is linked to another object. 
          3. The object created in the step2 is bounded to the this object. 
          4. If the function isn't returning anything, then 
