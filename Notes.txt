// Single line comments

/* This is a
multiline comment and this continues..
in the next line also. */

confirm("To confirm something to the user")

alert("To alert users");

document.write("To write something to the web page, when this js script is loaded..");

prompt("To ask the user for some info.");

//Data types
//strings (e.g. "dogs go woof!")
//numbers (e.g. 4, 10)
//booleans (e.g. false, 5 > 4)

var = 10; //to define a number variable. 

var = "Ravi"; //to define a string variable.

var = 14.25; //to define a decimal variable. 

var = true; //to define a boolean varible.

// JavaScript is case-sensitive


//Manipulating numbers & strings
//comparisons (e.g. >, <=)
//modulo (e.g. %)
//string length (e.g. "Emily".length;)
//substrings (e.g. "hi".substring(0, 1);)


//How to load javascript in HTML page? 
<script src="js/script.js" >

console.log("This will print this message on the console.");

// Here is an example of using the greater than (>) operator.
console.log(15 > 4); // 15 > 4 evaluates to true, so true is printed.

// Fill in with >, <, === so that the following print out true:
console.log("Xiao Hui".length <  122);
console.log("Goody Donaldson".length > 8);
console.log(8*2 === 16);

// if condition:
if ( 2 < 3) {
    console.log("2 < 3");
}

//if-else condition:
if ( 2> 3 ) 
{
    console.log("Let's go down the first road!");
}
else 
{
    console.log("This is in else")
    
}

// Another example:
if(true) {
console.log("This is printed always!");
}


//To display a substring:
"Hello".substring(1,3);

// To change a variable value. 
var var1 = "Ravi"; //Assign the value "Ravi" to var1
var1 = "Teja";    // Assing the value "Teja" to the same var1 

// Reading input from the user. 
var age = prompt("What's your age");

============================================================================================
// Functions in Javascript 
var divideByThree = function (number) {
    var val = number / 3;
    console.log(val);
};

dividedByThree(9);


First we declare a function using var, and then give it a name sayHello. The name should begin with a lowercase letter and the convention is to use lowerCamelCase where each word (except the first) begins with a capital letter.
Then we use the function keyword to tell the computer that you are making a function
The code in the parentheses is called a parameter. It's a placeholder word that we give a specific value when we call the function. Click "Stuck? Get a hint!" for more.
Then write your block of reusable code between { }. Every line of code in this block must end with a ;. You can run this code by "calling" the function, like this:  dividedByThree(9);


The var keyword declares a variable named functionName.
The keyword function tells the computer that functionName is a function and not something else.
Parameters go in the parentheses. The computer will look out for it in the code block.
The code block is the reusable code that is between the curly brackets { }. Each line of code inside { } must end with a semi-colon.
The entire function ends with a semi-colon.

// The return keyword:
var timesTwo = function(number) {
    return number * 2;
};
timesTwo(2);

// When we call a function, its return value is just the result from running the function. That value can then be used just like any other value in JavaScript!
var quarter = function(num){
    return num/4;
    };
if (quarter(12) % 3 === 0 ) {
  console.log("The statement is true");
} else {
  console.log("The statement is false");
}

// Function with 2 params
var perimeterBox = function(x,y){
    return 2*(x+y)
    };
perimeterBox(1,4)

// Global and Local scopes:
var my_number = 7; //this has global scope

var timesTwo = function(number) {
    var my_number = number * 2;
    console.log("Inside the function my_number is: ");
    console.log(my_number);
}; 

timesTwo(7);

console.log("Outside the function my_number is: ")
console.log(my_number);

//Math.random will produce a number between 0 to 1:
var computerChoice = Math.random();

// if else-if example:
if(false) {
console.log("In if");
}
else if(false){
console.log("In else-if"")
}

//=================================================================================================
var userChoice = prompt("Do you choose rock, paper or scissors?");
if (userChoice != "rock" || userChoice != "paper" || userChoice != "scissors"){
    console.log("Error");
    }
var computerChoice = Math.random();
if (computerChoice < 0.34) {
	computerChoice = "rock";
} else if(computerChoice <= 0.67) {
	computerChoice = "paper";
} else {
	computerChoice = "scissors";
} console.log("Computer: " + computerChoice);

var compare = function(choice1, choice2) {
    if (choice1===choice2){
        return "The result is a tie!";}
    else if (choice1==="rock"){
        if (choice2==="scissors"){
            return "rock wins";}
        else {
            return "paper wins"; }
    }
    else if (choice1==="paper"){
        if (choice2==="rock"){
            return "paper wins";}
        else {
            return "scissors wins"; }
    }
    else {
        if (choice2==="rock"){
            return "rock wins";}
        else {
            return "scissors wins"; }
    }
};

compare(userChoice, computerChoice);
else {
console.log("In else"); }

//=================================================================================================

// For loop:
for (var counter = 1; counter < 11; counter++) {
	console.log(counter);
}
for (var i = 5; i < 51; i +=5) {
	console.log(i);
}

//Arrays:
Variables can store numbers or strings. But so far, we've only been able to store ONE number or ONE string. Good thing we have arrays. Arrays:
a. store lists of data
b. can store different data types at the same time
c. are ordered so the position of each piece of data is fixed

eg:
var names = ["Mao","Gandhi","Mandela"];
var sizes = [4, 6, 3, 2, 1, 9];
var mixed = [34, "candy", "blue", 11];

//Parse through a Array
var x = [1,2,3,f,f,s]
for(var i=0; i<x.length;i++){
console.log(x[i]);
}

x.push(7)
console.log(x)
[1,2,3,f,f,s,7]


//While Loop
var bool = true;
while(bool){
    console.log("Less is more!");
    bool = false;
}


var loop = function(count){
    var i = 0
	while(i<count){
		//Your code goes here!
		console.log("I'm looping!");
		i++;
	}
};
loop(3);


//do-while:
var loopCondition = false;
do {
console.log("I'm gonna stop looping 'cause my condition is " + loopCondition + "!");	
} while (loopCondition);

var getToDaChoppa = function(){
  // Write your do/while loop here!
  do{
    console.log("okay");
  }while(false)
};
getToDaChoppa();

//All loops:
for(var i=1;i<10;i++){
    console.log("for");
    }
while(i<20){
    console.log("while");
    i++;
    }
do{
  console.log("do-while");
}while(false);


// isNaN function:
If you call isNaN on something, it checks to see if that thing is not a number:
isNaN("123") // => false
isNaN(undefined) // => true
//If you call isNaN on a string that looks like a number, like '42', JavaScript will try to help by automatically converting the string '42' to the number 42 and return false (since 42 is a number).

//var lunch = prompt("What do you want for lunch?","Type your lunch choice here");
Will prompt the user with second string(Type your.. ) as place holder text. 

//switch case:
switch(color) {
  case 'red':
    console.log("Red's a good color!");
    break;
  case 'blue':
    console.log("That's my favorite color, too!");
    break;
  default:
    console.log("I don't think that's a primary color!");
}

//Logical operators: JavaScript has three: and (&&), or (||), and not (!).

// To convert a string to upper case: 
"string".toUpperCase(); 

//Good work! If you remember, arrays have a property in common with strings: they can both use .length. When you call .length on an array, it returns the number of elements that array has.

//First, it's not necessary for you to put the same type of data in an array! For instance, you don't have to have:
var mix = [42, true, "towel"];
var myArray = [1, 2>3, "2"];

//Good! The next thing to know is that not only can you put a mixture of types in an array, you can even put other arrays inside arrays. You can make a two-dimensional array by nesting arrays one layer deep, like so:
var twoDimensional = [[1, 1], [1, 1]];

//Sometimes you want arrays that aren't as nice and even as your 3 x 3 two-dimensional array: you may have three elements in the first row, one element in the second row, and two elements in the third row. JavaScript allows those, and they're called jagged arrays.
var jagged=[[1],[2,3],[4,5,6],"2",true];

//Objects example:
var phonebookEntry = {};

phonebookEntry.name = 'Oxnard Montalvo';
phonebookEntry.number = '(555) 555-5555';
phonebookEntry.phone = function() {
  console.log('Calling ' + this.name + ' at ' + this.number + '...');
};

phonebookEntry.phone();

//An object is like an array in this way, except its keys can be variables and strings, not just numbers
//Objects are just collections of information (keys and values) between curly braces, like this:
var me = {
    name: "Ravi",
    age: 24,
};

//There are two ways to create an object: using object literal notation (above) and using the object constructor.
//Literal notation is just creating an object with curly braces, like this:
var myObj = {
    type: 'fancy',
    disposition: 'sunny'
};

var emptyObj = {};

//When you use the constructor, the syntax looks like this:
var myObj = new Object();
//This tells JavaScript: "I want you to make me a new thing, and I want that thing to be an Object.
//You can add keys to your object after you've created it in two ways:
myObj["name"] = "Charlie";
myObj.name = "Charlie";

eg:
var me = new Object();
me["name"]="Ravi";
me["age"]=24;

eg:var me = {};
var myArray = [1,true,"okay", me];

var me = {name:"Ravi", age:24};
var newArray = [[1,3],[me]];
