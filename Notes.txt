// Single line comments

/* This is a
multiline comment and this continues..
in the next line also. */

confirm("To confirm something to the user")

alert("To alert users");

document.write("To write something to the web page, when this js script is loaded..");

prompt("To ask the user for some info.");

//Data types
//strings  (e.g. "dogs go woof!")
//numbers  (e.g. 4, 10)
//booleans (e.g. false, 5 > 4)
//arrays   (e.g [1,2,"3","four"])
//Objects  (e.g {name:"Ravi",age:24})

var = 10; //to define a number variable. 

var = "Ravi"; //to define a string variable.

var = 14.25; //to define a decimal variable. 

var = true; //to define a boolean varible.

// JavaScript is case-sensitive


//Manipulating numbers & strings
//comparisons (e.g. >, <=)
//modulo (e.g. %)
//string length (e.g. "Emily".length;)
//substrings (e.g. "hi".substring(0, 1);)


//How to load javascript in HTML page? 
<script src="js/script.js" >

console.log("This will print this message on the console.");

// Here is an example of using the greater than (>) operator.
console.log(15 > 4); // 15 > 4 evaluates to true, so true is printed.

// Fill in with >, <, === so that the following print out true:
console.log("Xiao Hui".length <  122);
console.log("Goody Donaldson".length > 8);
console.log(8*2 === 16);

// if condition:
if ( 2 < 3) {
    console.log("2 < 3");
}

//if-else condition:
if ( 2> 3 ) 
{
    console.log("Let's go down the first road!");
}
else 
{
    console.log("This is in else")
    
}

// Another example:
if(true) {
console.log("This is printed always!");
}


//To display a substring:
"Hello".substring(1,3);

// To change a variable value. 
var var1 = "Ravi"; //Assign the value "Ravi" to var1
var1 = "Teja";    // Assing the value "Teja" to the same var1 

// Reading input from the user. 
var age = prompt("What's your age");

============================================================================================
// Functions in Javascript 
var divideByThree = function (number) {
    var val = number / 3;
    console.log(val);
};

dividedByThree(9);


First we declare a function using var, and then give it a name sayHello. The name should begin with a lowercase letter and the convention is to use lowerCamelCase where each word (except the first) begins with a capital letter.
Then we use the function keyword to tell the computer that you are making a function
The code in the parentheses is called a parameter. It's a placeholder word that we give a specific value when we call the function. Click "Stuck? Get a hint!" for more.
Then write your block of reusable code between { }. Every line of code in this block must end with a ;. You can run this code by "calling" the function, like this:  dividedByThree(9);


The var keyword declares a variable named functionName.
The keyword function tells the computer that functionName is a function and not something else.
Parameters go in the parentheses. The computer will look out for it in the code block.
The code block is the reusable code that is between the curly brackets { }. Each line of code inside { } must end with a semi-colon.
The entire function ends with a semi-colon.

// The return keyword:
var timesTwo = function(number) {
    return number * 2;
};
timesTwo(2);

// When we call a function, its return value is just the result from running the function. That value can then be used just like any other value in JavaScript!
var quarter = function(num){
    return num/4;
    };
if (quarter(12) % 3 === 0 ) {
  console.log("The statement is true");
} else {
  console.log("The statement is false");
}

// Function with 2 params
var perimeterBox = function(x,y){
    return 2*(x+y)
    };
perimeterBox(1,4)

// Global and Local scopes:
var my_number = 7; //this has global scope

var timesTwo = function(number) {
    var my_number = number * 2;
    console.log("Inside the function my_number is: ");
    console.log(my_number);
}; 

timesTwo(7);

console.log("Outside the function my_number is: ")
console.log(my_number);

//Math.random will produce a number between 0 to 1:
var computerChoice = Math.random();

// if else-if example:
if(false) {
console.log("In if");
}
else if(false){
console.log("In else-if"")
}

//=================================================================================================
var userChoice = prompt("Do you choose rock, paper or scissors?");
if (userChoice != "rock" || userChoice != "paper" || userChoice != "scissors"){
    console.log("Error");
    }
var computerChoice = Math.random();
if (computerChoice < 0.34) {
	computerChoice = "rock";
} else if(computerChoice <= 0.67) {
	computerChoice = "paper";
} else {
	computerChoice = "scissors";
} console.log("Computer: " + computerChoice);

var compare = function(choice1, choice2) {
    if (choice1===choice2){
        return "The result is a tie!";}
    else if (choice1==="rock"){
        if (choice2==="scissors"){
            return "rock wins";}
        else {
            return "paper wins"; }
    }
    else if (choice1==="paper"){
        if (choice2==="rock"){
            return "paper wins";}
        else {
            return "scissors wins"; }
    }
    else {
        if (choice2==="rock"){
            return "rock wins";}
        else {
            return "scissors wins"; }
    }
};

compare(userChoice, computerChoice);
else {
console.log("In else"); }

//=================================================================================================

// For loop:
for (var counter = 1; counter < 11; counter++) {
	console.log(counter);
}
for (var i = 5; i < 51; i +=5) {
	console.log(i);
}

//Arrays:
Variables can store numbers or strings. But so far, we've only been able to store ONE number or ONE string. Good thing we have arrays. Arrays:
a. store lists of data
b. can store different data types at the same time
c. are ordered so the position of each piece of data is fixed

eg:
var names = ["Mao","Gandhi","Mandela"];
var sizes = [4, 6, 3, 2, 1, 9];
var mixed = [34, "candy", "blue", 11];

//Parse through a Array
var x = [1,2,3,f,f,s]
for(var i=0; i<x.length;i++){
console.log(x[i]);
}

x.push(7)
console.log(x)
[1,2,3,f,f,s,7]


//While Loop
var bool = true;
while(bool){
    console.log("Less is more!");
    bool = false;
}


var loop = function(count){
    var i = 0
	while(i<count){
		//Your code goes here!
		console.log("I'm looping!");
		i++;
	}
};
loop(3);


//do-while:
var loopCondition = false;
do {
console.log("I'm gonna stop looping 'cause my condition is " + loopCondition + "!");	
} while (loopCondition);

var getToDaChoppa = function(){
  // Write your do/while loop here!
  do{
    console.log("okay");
  }while(false)
};
getToDaChoppa();

//All loops:
for(var i=1;i<10;i++){
    console.log("for");
    }
while(i<20){
    console.log("while");
    i++;
    }
do{
  console.log("do-while");
}while(false);


// isNaN function:
If you call isNaN on something, it checks to see if that thing is not a number:
isNaN("123") // => false
isNaN(undefined) // => true
//If you call isNaN on a string that looks like a number, like '42', JavaScript will try to help by automatically converting the string '42' to the number 42 and return false (since 42 is a number).

//var lunch = prompt("What do you want for lunch?","Type your lunch choice here");
Will prompt the user with second string(Type your.. ) as place holder text. 

//switch case:
switch(color) {
  case 'red':
    console.log("Red's a good color!");
    break;
  case 'blue':
    console.log("That's my favorite color, too!");
    break;
  default:
    console.log("I don't think that's a primary color!");
}

//Logical operators: JavaScript has three: and (&&), or (||), and not (!).

// To convert a string to upper case: 
"string".toUpperCase(); 

//Good work! If you remember, arrays have a property in common with strings: they can both use .length. When you call .length on an array, it returns the number of elements that array has.

//First, it's not necessary for you to put the same type of data in an array! For instance, you don't have to have:
var mix = [42, true, "towel"];
var myArray = [1, 2>3, "2"];

//Good! The next thing to know is that not only can you put a mixture of types in an array, you can even put other arrays inside arrays. You can make a two-dimensional array by nesting arrays one layer deep, like so:
var twoDimensional = [[1, 1], [1, 1]];

//Sometimes you want arrays that aren't as nice and even as your 3 x 3 two-dimensional array: you may have three elements in the first row, one element in the second row, and two elements in the third row. JavaScript allows those, and they're called jagged arrays.
var jagged=[[1],[2,3],[4,5,6],"2",true];

//Objects example:
var phonebookEntry = {};

phonebookEntry.name = 'Oxnard Montalvo';
phonebookEntry.number = '(555) 555-5555';
phonebookEntry.phone = function() {
  console.log('Calling ' + this.name + ' at ' + this.number + '...');
};

phonebookEntry.phone();

//An object is like an array in this way, except its keys can be variables and strings, not just numbers
//Objects are just collections of information (keys and values) between curly braces, like this:
var me = {
    name: "Ravi",
    age: 24,
};

//There are two ways to create an object: using object literal notation (above) and using the object constructor.
//Literal notation is just creating an object with curly braces, like this:
var myObj = {
    type: 'fancy',
    disposition: 'sunny'
};

var emptyObj = {};

//When you use the constructor, the syntax looks like this:
var myObj = new Object();
//This tells JavaScript: "I want you to make me a new thing, and I want that thing to be an Object.
//You can add keys to your object after you've created it in two ways:
myObj["name"] = "Charlie";
myObj.name = "Charlie";

eg:
var me = new Object();
me["name"]="Ravi";
me["age"]=24;

eg:var me = {};
var myArray = [1,true,"okay", me];

var me = {name:"Ravi", age:24};
var newArray = [[1,3],[me]];

eg:
var myObject = {
  name: 'Eduardo',
  type: 'Most excellent',
  age: 24,
  add: ["407", "Teja Res","road. no:4" ,500049],
  interests: ["coding","cricket"]
};

eg:
var myOwnObject = {};
myOwnObject.name = "ravi";
myOwnObject.age = 24;

eg:
var friends = {};
friends.bill = {
    firstName:"Bill",
    lastName:"Gates",
    number:"12345",
    address:["MS","Phil"]
    };
friends.steve = {
    firstName:"Steve",
    lastName:"Jobs",
    number:"123457",
    address:["Apple","Pixel"]
    };

var list = function(param1){ 
    for(var ob in param1){
    console.log(ob);
    }
};

var search = function(name){
    for(var ob in friends){
    if(friends[ob].firstName === name) {
        console.log(ob);
        console.log(friends[ob]);
        return friends[ob];
    }
    }
};

eg:
for(var i=1; i<21;i++){
    if(i%3==0){
        if(i%5==0){ console.log("FizzBuzz");}
        else{ console.log("Fizz");}
    }
    else if(i%5==0){
        console.log("Buzz");}
    else {
        console.log(i);
    }
};

//Fifth data type: objects - This data type is a little bit more complex. Objects allow us to represent in code real world things and entities (such as a person or bank account). We do this by storing all relevant information in one place—an object.

//Properties
/*Let's review what we previously covered. Each piece of information we include in an object is known as a property. Think of a property like a category label that belongs to some object. When creating an object, each property has a name, followed by : and then the value of that property. For example, if we want Bob's object to show he is 34, we'd type in age: 34.
age is the property, and 34 is the value of this property. When we have more than one property, they are separated by commas. The last property does not end with a comma.*/

eg:
var bob = {
  name: "Bob Smith",
  age: 30
};
var susan = {
  name: "Susan Jordan",
  age: 25
};
// here we save Bob's information
var name1 = bob.name;
var age1 = bob.age;
// finish this code by saving Susan's information
var name2 =susan['name'];
var age2 =susan['age'];


//Method:
//In the last section, we discussed properties. We can think of properties as variables associated with an object. Similarly, a method is just like a function associated with an object.
// here is bob again, with his usual properties
var bob = new Object();
bob.name = "Bob Smith";
bob.age = 30;
// this time we have added a method, setAge
bob.setAge = function (newAge){
  bob.age = newAge;
};
// here we set bob's age to 40
bob.setAge(40);
// bob's feeling old.  Use our method to set bob's age to 20

/*
The "this" Keyword
Our setAge method works great for bob because it updates bob.age, but what if we want to use it for other people?

It turns out we can make a method work for many objects using a new keyword, this. The keyword this acts as a placeholder, and will refer to whichever object called that method when the method is actually used.

Let's look at the method setAge (line 2) to see how this works. By using the keyword this, setAge will change the age property of any object that calls it. Previously, we had a specific object bob instead of the keyword this. But that limited the use of the method to just bob.

Then when we say bob.setAge = setAge; (line 9), it means whenever we type bob.setAge( ), this.age in the setAge method will refer to bob.age. */


function Person(name,age) {
  this.name = name;
  this.age = age;
}

// Let's make bob and susan again, using our constructor
var bob = new Person("Bob Smith", 30);
var susan = new Person("Susan Jordan", 25);
// help us make george, whose name is "George Washington" and age is 275



eg:
function Person(name,age) {
  this.name = name;
  this.age = age;
  this.species = "Homo Sapiens";
};

var sally = new Person("Sally Bowles", 39);
var holden = new Person("Holden Caulfield", 16);
console.log("sally's species is " + sally.species + " and she is " + sally.age);
console.log("holden's species is " + holden.species + " and he is " + holden.age);

eg:
function Rectangle(height, width) {
  this.height = height;
  this.width = width;
  this.calcArea = function() {
      return this.height * this.width;
  };
  // put our perimeter function here!
  this.calcPerimeter = function() {
      return 2*(this.height + this.width);
  };
  
}

var rex = new Rectangle(7,3);
var area = rex.calcArea();
var perimeter = rex.calcPerimeter();

eg:
function Rabbit(adjective) {
    this.adjective = adjective;
    this.describeMyself = function() {
        console.log("I am a " + this.adjective + " rabbit");
    };
}

// now we can easily make all of our rabbits

var rabbit1 = new Rabbit("fluffy");
var rabbit2 = new Rabbit("happy");
var rabbit3 = new Rabbit("sleepy");

console.log(rabbit1.describeMyself);
console.log(rabbit2.describeMyself);
console.log(rabbit3.describeMyself);

eg:
// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}

// Now we can make an array of people
var family = new Array();
family[0] = new Person("alice", 40);
family[1] = new Person("bob", 42);
family[2] = new Person("michelle", 8);
// add the last family member, "timmy", who is 6 years old
family[3] = new Person("timmy",6);

eg:
// Our Person constructor
function Person(name,age) {
 this.name = name;
 this.age  = age;
}

// Now we can make an array of people
var family = new Array();
family[0] = new Person("alice",40);
family[1] = new Person("bob",42);
family[2] = new Person("michelle",8);
family[3] = new Person("timmy",6);

// loop through our new array
for (var mem in family){
    console.log(family[mem].name);
    };

eg:
// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}

// We can make a function which takes persons as arguments
// This one computes the difference in ages between two people
var ageDifference = function(person1, person2) {
    return person1.age - person2.age;
};

// Make a new function, olderAge, to return the age of
// the older of two people
var olderAge = function(p1,p2) {
    if(p1.age > p2.age){return p1.age;}
    else {return p2.age;}
    };


// Let's bring back alice and billy to test our new function
var alice = new Person("Alice", 30);
var billy = new Person("Billy", 25);

console.log("The older person is " + olderAge(alice, billy));


//What Are Objects For?
//Objects provide us with a way to represent real-world or virtual things. We can do this by storing information inside the object's properties. 

eg:
var snoopy = new Object();
snoopy.species = "beagle";
snoopy.age = 10;

// save Snoopy's age and species into variables
// use dot notation for snoopy's species
var species = snoopy.species;
    
// use bracket notation for snoopy's age
var age = snoopy["age"];

eg:
// 3 lines required to make harry_potter
var harry_potter = new Object();
harry_potter.pages = 350;
harry_potter.author = "J.K. Rowling";

// A custom constructor for book
function Book (pages, author) {
    this.pages = pages;
    this.author = author;
}

// Use our new constructor to make the_hobbit in one line
var the_hobbit = new Book(320, "J.R.R. Tolkien");

eg:
function Circle (radius) {
    this.radius = radius;
    this.area = function () {
        return Math.PI * this.radius * this.radius;
    };
    // define a perimeter method here
    this.perimeter = function() {
        return 2 * Math.PI * this.radius;
    };
    
};

eg:
var bob = {
    firstName: "Bob",
    lastName: "Jones",
    phoneNumber: "(650) 777-7777",
    email: "bob.jones@example.com"
};

var mary = {
    firstName: "Mary",
    lastName: "Johnson",
    phoneNumber: "(650) 888-8888",
    email: "mary.johson@example.com"
};

var contacts = [bob, mary];
console.log(contacts[1].phoneNumber);

eg:
var bob = {
    firstName: "Bob",
    lastName: "Jones",
    phoneNumber: "(650) 777-7777",
    email: "bob.jones@example.com"
};

var mary = {
    firstName: "Mary",
    lastName: "Johnson",
    phoneNumber: "(650) 888-8888",
    email: "mary.johnson@example.com"
};

var contacts = [bob, mary];

function printPerson(person) {
    console.log(person.firstName + " " + person.lastName);
}

function list() {
	var contactsLength = contacts.length;
	for (var i = 0; i < contactsLength; i++) {
		printPerson(contacts[i]);
	}
}

/*Create a search function
then call it passing "Jones"*/
var search = function(lastName){
    var contactsLength = contacts.length;
    for(var i in contacts) {
        console.log(i.lastName);
        if(contacts[i].lastName === lastName){ 
            printPerson(contacts[i])
        }
    }
    };
    
search("Jones");

eg:
var james = {
    job: "programmer",
    married: false,
    speak: function(msg) {
        console.log("Hello, I am feeling "+msg);
    }
};

james.speak("great");
james.speak("just okay");

eg:
var james = {
    job: "programmer",
    married: false,
    sayJob: function() {
        console.log("Hi, I work as a "+this.job);
    }
};

// james' first job
james.sayJob();

// change james' job to "super programmer" here
james.job ="super programmer";

// james' second job
james.sayJob();

eg:
var james = {
    job: "programmer",
    married: false
};

// set to the first property name of "james"
var aProperty = "job";

// print the value of the first property of "james" 
// using the variable "aProperty"
console.log(james[aProperty]);

/*Say we have a variable thing and we don't know what type thing is. We can call typeof thing to figure this out. Generally, the most useful types are "number," "string," "function," and of course, "object."*/
// complete these definitions so that they will have
// the appropriate types
var anObj = { job: "I'm an object!" };
var aNumber = 42;
var aString = "I'm a string!";

console.log( typeof anObj  ); // should print "object"
console.log( typeof aNumber ); // should print "number"
console.log( typeof aString ); // should print "string"

//hasOwnProperty('property-name'):
var myObj = {
    name: "myObj"
};

console.log( myObj.hasOwnProperty('name') ); // should print true
console.log( myObj.hasOwnProperty('nickname') ); // should print false

eg:
var suitcase = {
    shirt: "Hawaiian"
};

//console.log(suitcase.shorts);
if(suitcase.hasOwnProperty("shorts")){ 
    console.log("shorts");
}
else {
    suitcase.shorts = "no shorts!";
    console.log(suitcase.shorts);
}

/*
Now let's learn how to work with all the properties that belong to an object. First, let's define an object:

var dog = {
species: "bulldog",
age: 3,
color: brown
};
To print out all elements, we can use a for/in loop, like this:

for(var property in dog) {
  console.log(property);
}
In the loop we use console.log to print out each key. Remember the "property" bit can be any placeholder name you like. */

eg:
var nyc = {
    fullName: "New York City",
    mayor: "Bill de Blasio",
    population: 8000000,
    boroughs: 5
};

for(var prop in nyc){
    console.log(prop);
};


//List ALL the Properties!
We've just seen how to print all of an object's property names with a for-in loop. But how do we print out all the values associated with every property? Surprise! The for-in loop will be our friend again! Let's get there slowly. Our dog object can help us.

var dog = {
species: "bulldog",
age: 3,
color: brown
};
First, remember that
dog.species = dog["species"] = "bulldog";

And if we say:

var x = "species";

then

dog[x] = "bulldog";

We see that by assigning the property name to a variable, we can then use the variable name in bracket notation to get the property's value. So to get all the values from the dog object, we would use the for-in loop and the bracket notation we just saw above. See the hint to see the code to print the property values for dog.

eg:
var nyc = {
    fullName: "New York City",
    mayor: "Bill de Blasio",
    population: 8000000,
    boroughs: 5
};

// write a for-in loop to print the value of nyc's properties
for(var prop in nyc){
    console.log(nyc[prop])
};


/*Class is in Session
Alright, it's time to learn the basics of object-oriented programming! Often abbreviated OOP, this is a very important programming paradigm that is widely used in the industry today.

Let's start by introducing classes. We learned in the last course that constructors are a way to make objects, but they actually do even more than that.

When you make a constructor, you are in fact defining a new class. A class can be thought of as a type, or a category of objects—kind of like how Number and String are types in JavaScript. */

eg:
function Dog (breed) {
  this.breed = breed;
}

// here we make buddy and teach him how to bark
var buddy = new Dog("Golden Retriever");
buddy.bark = function() {
  console.log("Woof");
};
buddy.bark();

// here we make snoopy
var snoopy = new Dog("Beagle");
// we need you to teach snoopy how to bark here

// this causes an error, because snoopy doesn't know how to bark!
snoopy.bark();


eg:
function Person(name,age) {
  this.name = name;
  this.age = age;
}
// a function that prints the name of any given person
var printPersonName = function (p) {
  console.log(p.name);
};

var bob = new Person("Bob Smith", 30);
printPersonName(bob);

// make a person called me with your name and age
// then use printPersonName to print your name
var me = new Person("Ravi",24);
printPersonName(me);

//Prototype to the Rescue:
Here we have very similar code as last time, but there is an important difference. Instead of using buddy.bark to add the bark method to just the buddy object, we use Dog.prototype.bark.

Click run this time, and both buddy and snoopy can bark just fine! Snoopy can bark too even though we haven't added a bark method to that object. How is this so? Because we have now changed the prototype for the class Dog. This immediately teaches all Dogs the new method.

In general, if you want to add a method to a class such that all members of the class can use it, we use the following syntax to extend the prototype:

className.prototype.newMethod =

function() {
statements;
};

eg:
// the original Animal class and sayName method
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
}
Animal.prototype.sayName = function() {
    console.log("Hi my name is " + this.name);
};

// define a Penguin class
function Penguin(name){
    this.name = name;
    this.numLegs = 2;
    };

// set its prototype to be a new instance of Animal
Penguin.prototype = new Animal();

eg:
// the original Animal class and sayName method
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
}
Animal.prototype.sayName = function() {
    console.log("Hi my name is " + this.name);
};

// define a Penguin class
function Penguin(name){
    this.name = name;
    this.numLegs = 2;
    };

// set its prototype to be a new instance of Animal
Penguin.prototype = new Animal();

var penguin = new Penguin("mynmae");
penguin.sayName();

eg:
function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
}

// create your Emperor class here and make it inherit from Penguin
function Emperor(name){
    this.name = name;
    };
Emperor.prototype = new Penguin();

// create an "emperor" object and print the number of legs it has
var emperor = new Emperor("Ravi");
console.log(emperor.numLegs);

/* Up the Food-I-mean-Prototype Chain
A penguin is an animal and an emperor penguin is a penguin. Are emperor penguins animals too? Of course!

The "prototype chain" in JavaScript knows this as well. If JavaScript encounters something it can't find in the current class's methods or properties, it looks up the prototype chain to see if it's defined in a class that it inherits from. This keeps going upwards until it stops all the way at the top: the mighty Object.prototype (more on this later). By default, all classes inherit directly from Object, unless we change the class's prototype */

eg:
// original classes
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
    this.isAlive = true;
}
function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
}
function Emperor(name) {
    this.name = name;
    this.saying = "Waddle waddle";
}

// set up the prototype chain
Penguin.prototype = new Animal();
Emperor.prototype = new Penguin();

var myEmperor = new Emperor("Jules");

console.log(myEmperor.saying); // should print "Waddle waddle"
console.log(myEmperor.numLegs); // should print 2
console.log( myEmperor.isAlive); // should print true

/*Open to the Public
In JavaScript all properties of an object are automatically public. Public means that they can be accessed outside the class. Think of these properties as the information a class is willing to share.

Look at the Person class. It has 3 public properties: firstName, lastName, and age. On lines 8 and 9, we access the firstName and lastName properties of john and assign them to myFirst and myLast.

Notice that we are free to access the firstName and lastName properties, which is what we mean when we say they are public.*/

eg:
function Person(first,last,age) {
   this.firstName = first;
   this.lastName = last;
   this.age = age;
}

var john = new Person('John','Smith',30);
var myFirst = john.firstName;
var myLast = john.lastName;

//declare variable myAge set to the age of the john object.
var myAge = john.age;


/* Private Variables
Good! But what if an object wants to keep some information hidden?

Just as functions can have local variables which can only be accessed from within that function, objects can have private variables. Private variables are pieces of information you do not want to publicly share, and they can only be directly accessed from within the class.

The Person class has been modified to have a private variable called bankBalance. Notice that it looks just like a normal variable, but it is defined inside the constructor for Person without using this, but instead using var. This makes bankBalance a private variable. */

eg:
function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
}

// create your Person 
var john = new Person("John","Sena",24);

// try to print his bankBalance - prints undefined. 
console.log(john.bankBalace);


/* Accessing Private Variables:
Although we cannot directly access private variables from outside the class, there is a way to get around this. We can define a public method that returns the value of a private variable.*/

eg:
function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
  
   this.getBalance = function() {
      // your code should return the bankBalance
      return bankBalance; 
   };
}

var john = new Person('John','Smith',30);
console.log(john.bankBalance);

// create a new variable myBalance that calls getBalance()
var myBalance = john.getBalance();
console.log(myBalance);


/*Methods can also be private within a class and inaccessible outside of the class. Changing this.returnBalance from the last exercise to var returnBalance makes this method private. If you run the program trying to access the method you get an undefined error this time.

The way to access a private method is similar to accessing a private variable. You must create a public method for the class that returns the private method. */

eg:
function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
  
   var returnBalance = function() {
      return bankBalance;
   };
       
   // create the new function here
   this.askTeller = function(){
       return returnBalance;
       };
}

var john = new Person('John','Smith',30);
console.log(john.returnBalance);
var myBalanceMethod = john.askTeller();
var myBalance = myBalanceMethod();
console.log(myBalance);

/* Passing Arguments
The askTeller function has been modified within the Person class to directly give you your balance. However, it now needs the account password in order to return the bankBalance. */

eg:
function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
  
   this.askTeller = function(pass) {
     if (pass == 1234) return bankBalance;
     else return "Wrong password.";
   };
}

var john = new Person('John','Smith',30);
/* the variable myBalance should access askTeller()
   with a password as an argument  */
var myBalance = john.askTeller(1234);


eg:
var languages = {
    english: "Hello!",
    french: "Bonjour!",
    notALanguage: 4,
    spanish: "Hola!"
};

// print hello in the 3 different languages
for(var l in languages){
    if(typeof languages[l] === "string") {
    console.log(languages[l]);
    }
};

/*We should all know by now what's so cool about using prototype: we can define a method for a class, and any instance of the class (i.e., object created using that class's constructor) can use that method.

Remember that classes and the prototype are important to OOP!*/

eg:
function Dog (breed) {
    this.breed = breed;
};

// add the sayHello method to the Dog class 
// so all dogs now can say hello
Dog.prototype.sayHello = function(){
    console.log("Hello this is a "+this.breed+" dog");
}


var yourDog = new Dog("golden retriever");
yourDog.sayHello();

var myDog = new Dog("dachshund");
myDog.sayHello();


/*Do you remember how we said every JavaScript object has some baggage associated with it? Part of this baggage was the hasOwnProperty method available to all objects. Now let's see where this came from...
If we have just a plain object (i.e., not created from a class constructor), recall that it automatically inherits from Object.prototype. Could this be where we get hasOwnProperty from? How can we check? */
// what is this "Object.prototype" anyway...? - object
var prototypeType =  typeof Object.prototype;
console.log(prototypeType);

// now let's examine it! - prints true
var hasOwn = Object.prototype.hasOwnProperty('hasOwnProperty');
console.log(hasOwn);

/*Private Eye
Recall that:

Public properties can be accessed from outside the class
Private properties can only be accessed from within the class
Using constructor notation, a property declared as this.property = "someValue;" will be public, whereas a property declared with var property = "hiddenValue;" will be private.

In this exercise, hit run and you'll see that all your grades are exposed! You really just want people to know your overall GPA.*/

eg:
function StudentReport() {
    var grade1 = 4;
    var grade2 = 2;
    var grade3 = 1;
    this.getGPA = function() {
        return (grade1 + grade2 + grade3) / 3;
    };
    
    
}

var myStudentReport = new StudentReport();

for(var x in myStudentReport) {
    if(typeof myStudentReport[x] !== "function") {
        console.log("Muahaha! " + myStudentReport[x]);
    }
}

console.log("Your overall GPA is " + myStudentReport.getGPA());

eg:
var cashRegister = {
    total: 0,
    
    add: function(itemCost){
      this.total=this.total + itemCost;  
    },
    
    scan: function (item) {
        switch (item) { 
        case "eggs": 
            this.add(0.98); 
            break;
        case "milk": 
            this.add(1.23); 
            break;
        case "magazine":
            this.add(4.99);
            break;
        case "chocolate":
            this.add(0.45);
            break;
    }
},
};

//Scan 2 eggs and 3 magazines
cashRegister.scan("eggs");
cashRegister.scan("eggs");
cashRegister.scan("magazine");
cashRegister.scan("magazine");
cashRegister.scan("magazine");
//Show the total bill
console.log('Your bill is '+cashRegister.total);

eg:
var cashRegister = {
    total:0,
    //Dont forget to add your property
    add: function(itemCost) {
        this.total +=  itemCost;
    },
    scan: function(item,quantity) {
        switch (item) {
        case "eggs": this.add(0.98 * quantity); break;
        case "milk": this.add(1.23 * quantity); break;
        case "magazine": this.add(4.99 * quantity); break;
        case "chocolate": this.add(0.45 * quantity); break;
        }
        return true;
    },
    //Add the voidLastTransaction Method here
    
    
};

cashRegister.scan('eggs',1);
cashRegister.scan('milk',1);
cashRegister.scan('magazine',1);
cashRegister.scan('chocolate',4);

//Void the last transaction and then add 3 instead


//Show the total bill
console.log('Your bill is '+cashRegister.total);

eg:
var cashRegister = {
    total:0,
    lastTransactionAmount: 0,
    add: function(itemCost) {
        this.total +=  itemCost;
        lastTransactionAmount = itemCost;
    },
    scan: function(item,quantity) {
        switch (item) {
        case "eggs": this.add(0.98 * quantity); break;
        case "milk": this.add(1.23 * quantity); break;
        case "magazine": this.add(4.99 * quantity); break;
        case "chocolate": this.add(0.45 * quantity); break;
        }
        return true;
    },
    //Add the voidLastTransaction Method here
    voidLastTransaction: function(){
        this.total = this.total - lastTransactionAmount;
    }
};

cashRegister.scan('eggs',1);
cashRegister.scan('milk',1);
cashRegister.scan('magazine',1);
cashRegister.scan('chocolate',4);

//Void the last transaction and then add 3 instead
cashRegister.voidLastTransaction();
cashRegister.scan('chocolate',3);

//Show the total bill
console.log('Your bill is '+cashRegister.total);




